#! /usr/bin/env python3

import argparse
import copy
import os
import subprocess
import sys

from dotenv import dotenv_values
from pathlib import Path

DEFAULT_CONTENT_TYPE = "Content-Type: application/x-ndjson"
DEFAULT_END_FRAGMENT = "/_bulk?filter_path=items.*.error"
DEFAULT_FILE_EXTENSION = ".ndjson"
DATA_BINARY_OPTION = "--data-binary"
XPOST_OPTION = "-XPOST"
HEADER_OPTION = "-H"


class BulkLoadESFiles:

    def __init__(self):
        self._parse_arguments()
        self.config = {}
        if self.arguments["dotenv_path"]:
            self.config = dotenv_values(self.arguments['dotenv_path'])
        self.curl_arguments = self._set_curl_options()
        self.curl_endpoint_fragment = self._assemble_endpoint_fragment()

    def _parse_arguments(self):
        parser = argparse.ArgumentParser(
            description="Load Elasticsearch bookmark import files"
        )
        parser.add_argument(
            "--cert-file",
            dest="cert_file",
            type=str,
            required=False,
            help="Path to the SSL cert file (.pem, .crt, etc.)"
        )
        parser.add_argument(
            "-K",
            "--config",
            dest="config",
            type=str,
            required=False,
            help="Path to a curl config file; useful for username/password values"
        )
        parser.add_argument(
            "--curl-command",
            dest="curl_command",
            type=str,
            default="curl",
            required=False,
            help="Path to the curl command"
        )
        parser.add_argument(
            "-d",
            "--directory",
            type=str,
            required=False,
            help="Process all files in the directory"
        )
        parser.add_argument(
            "--dry-run",
            action="store_true",
            default=False,
            required=False,
            help="Output curl commands, but do not run them"
        )
        parser.add_argument(
            "-f",
            "--filename",
            type=str,
            required=False,
            help="Process filename"
        )
        parser.add_argument(
            "--env",
            "--dotenv-path",
            dest="dotenv_path",
            type=str,
            required=False,
            help="Path to the dotenv file, if used"
        )
        parser.add_argument(
            "--header",
            type=str,
            required=False,
            help="Content-Type header, defaults to " + DEFAULT_CONTENT_TYPE
        )
        parser.add_argument(
            "-i",
            "--index",
            type=str,
            required=False,
            help="Elasticsearch index to load"
        )
        parser.add_argument(
            "-b",
            "--base-url",
            dest="base_url",
            type=str,
            required=False,
            help="Top-level URL to post data, not including index path or query string"
        )
        parsed_arguments = parser.parse_args()
        self.arguments = vars(parsed_arguments)

    def _set_curl_options(self):
        arguments = []

        if self.arguments['cert_file']:
            arguments.append("--cacert")
            arguments.append(os.path.expandvars(self.arguments['cert_file']))
        elif 'cert_file' in self.config:
            arguments.append("--cacert")
            arguments.append(os.path.expandvars(self.config['cert_file']))
        elif 'cert_file' in self.config:
            arguments.append("--cacert")
            arguments.append(os.path.expandvars(self.config['cert_file']))
        elif 'CERT_FILE' in self.config:
            arguments.append("--cacert")
            arguments.append(os.path.expandvars(self.config['CERT_FILE']))

        if self.arguments['config']:
            arguments.append("--config")
            arguments.append(os.path.expandvars(self.arguments['config']))
        elif 'config' in self.config:
            arguments.append("--config")
            arguments.append(os.path.expandvars(self.config['config']))

        arguments.append(XPOST_OPTION)
        arguments.append(self._assemble_endpoint_fragment())

        # Mandatory
        arguments.append(HEADER_OPTION)
        if self.arguments['header']:
            arguments.append(self.arguments['header'])
        elif 'header' in self.config:
            arguments.append(self.config['header'])
        else:
            arguments.append(DEFAULT_CONTENT_TYPE)

        return arguments

    def _assemble_endpoint_fragment(self):

        base_url = None
        index = None

        if self.arguments['base_url']:
            base_url = self.arguments['base_url']
        elif 'base_url' in self.config:
            base_url = self.config['base_url']
        elif 'BASE_URL' in self.config:
            base_url = self.config['BASE_URL']

        if base_url is None:
            print("Error: no base URL specified by --base-url or config!")
            sys.exit(1)

        if self.arguments['index']:
            index = self.arguments['index']
        elif 'default_index' in self.config:
            index = self.config['default_index']
        elif 'DEFAULT_INDEX' in self.config:
            index = self.config['DEFAULT_INDEX']

        if index is None:
            print("Error: no index URL specified by --index or config!")
            sys.exit(1)

        return base_url + "/" + index + DEFAULT_END_FRAGMENT

    def _get_filelist(self):
        filelist = []

        if self.arguments['filename']:
            filelist.append(self.arguments['filename'])
        elif self.arguments['directory']:
            pth = Path(self.arguments['directory'])
            for file in list(pth.glob('*' + DEFAULT_FILE_EXTENSION)):
                filelist.append(file)

        if len(filelist) == 0:
            print("Error: no files to process from --filename or --directory!")
            sys.exit(1)

        return filelist

    def _run_curl(self, url, filename):
        curl_arguments = copy.copy(self.curl_arguments)

        curl_filename = '@' + str(filename)

        curl_arguments.append(DATA_BINARY_OPTION)
        curl_arguments.append(curl_filename)

        if self.arguments['dry_run']:
            print(self.arguments['curl_command'] + ' ' + ' '.join(curl_arguments))
            sys.exit(0)

        proc = subprocess.run(
            [self.arguments["curl_command"], *curl_arguments],
            check=True
        )

    def run(self):
        for file in self._get_filelist():
            absolute_filename = os.path.abspath(file)
            self._run_curl(self.curl_endpoint_fragment, absolute_filename)


if __name__ == "__main__":
    program = BulkLoadESFiles()
    program.run()
